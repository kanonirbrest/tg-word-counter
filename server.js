const express = require('express');
const { Telegraf, session } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cloudinary = require('cloudinary').v2;
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session());
bot.use(new LocalSession({ database: 'sessions.json' }).middleware());

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(fileId, fileName) {
  try {
    const file = await bot.telegram.getFile(fileId);
    const filePath = file.file_path;
    const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
    
    const response = await axios({
      method: 'GET',
      url: url,
      responseType: 'stream'
    });
    
    const writer = fs.createWriteStream(fileName);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–∞ —á–µ—Ä–µ–∑ Cloudinary
async function applyAudioFilter(inputFile, filterType) {
  try {
    console.log(`–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ Cloudinary: ${inputFile}`);
    const uploadResult = await cloudinary.uploader.upload(inputFile, {
      resource_type: 'video',
      format: 'ogg'
    });
    
    console.log('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary, public_id:', uploadResult.public_id);
    console.log('–ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä:', filterType);
    let transformation = [];
    
    switch (filterType) {
      case 'bass':
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'bass_boost' }
        ];
        break;
      case 'treble':
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'treble_boost' }
        ];
        break;
      case 'echo':
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'echo' }
        ];
        break;
      case 'reverb':
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'reverb' }
        ];
        break;
      case 'speed':
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'speed_up' }
        ];
        break;
      case 'distortion':
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'distortion' }
        ];
        break;
      default:
        transformation = [
          { audio_codec: 'aac', audio_bitrate: '128k' },
          { audio_frequency: 44100 },
          { audio_effects: 'volume_up' }
        ];
    }
    
    console.log('–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è:', JSON.stringify(transformation));
    const result = await cloudinary.utils.generate_transformation_string(transformation);
    console.log('–°—Ç—Ä–æ–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:', result);
    
    const processedUrl = cloudinary.url(uploadResult.public_id, {
      resource_type: 'video',
      format: 'ogg',
      transformation: result
    });
    console.log('URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', processedUrl);
    
    console.log('–°–∫–∞—á–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    const response = await axios({
      method: 'GET',
      url: processedUrl,
      responseType: 'stream'
    });
    
    const outputFile = path.join(tempDir, `processed_${path.basename(inputFile)}`);
    console.log('–°–æ—Ö—Ä–∞–Ω—è—é –≤ —Ñ–∞–π–ª:', outputFile);
    const writer = fs.createWriteStream(outputFile);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ Cloudinary
        cloudinary.uploader.destroy(uploadResult.public_id, { resource_type: 'video' })
          .then(() => console.log('–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Cloudinary'))
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Cloudinary:', err));
        resolve(outputFile);
      });
      writer.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
        reject(err);
      });
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    const voice = ctx.message.voice;
    const fileId = voice.file_id;
    const fileName = `${Date.now()}_${fileId}.ogg`;
    const inputPath = path.join(tempDir, fileName);
    
    console.log('–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª:', fileId);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processingMsg = await ctx.reply('üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await downloadFile(fileId, inputPath);
    console.log('–§–∞–π–ª —Å–∫–∞—á–∞–Ω:', inputPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä
    const stats = fs.statSync(inputPath);
    console.log('–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', stats.size, '–±–∞–π—Ç');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
    let filterType = ctx.session?.filterType || 'volume';
    console.log('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏:', filterType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) {
      console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é volume –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      ctx.session = { filterType: 'volume' };
    }
    
    console.log('–ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä:', filterType);
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —á–µ—Ä–µ–∑ Cloudinary
    const outputPath = await applyAudioFilter(inputPath, filterType);
    console.log('–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª:', outputPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä
    const outputStats = fs.statSync(outputPath);
    console.log('–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', outputStats.size, '–±–∞–π—Ç');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    await ctx.replyWithVoice({ source: outputPath });
    console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    fs.unlinkSync(inputPath);
    fs.unlinkSync(outputPath);
    console.log('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('inline_query', async (ctx) => {
  const query = ctx.inlineQuery.query;
  console.log('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å:', query);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const results = [
    {
      type: 'article',
      id: '1',
      title: '–£—Å–∏–ª–∏—Ç—å –±–∞—Å',
      description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –±–∞—Å–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_bass' }
          ]]
        }
      }
    },
    {
      type: 'article',
      id: '2',
      title: '–£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
      description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_treble' }
          ]]
        }
      }
    },
    {
      type: 'article',
      id: '3',
      title: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ',
      description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —ç—Ö–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_echo' }
          ]]
        }
      }
    },
    {
      type: 'article',
      id: '4',
      title: '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é',
      description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_reverb' }
          ]]
        }
      }
    },
    {
      type: 'article',
      id: '5',
      title: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
      description: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_speed' }
          ]]
        }
      }
    },
    {
      type: 'article',
      id: '6',
      title: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å',
      description: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_volume' }
          ]]
        }
      }
    },
    {
      type: 'article',
      id: '7',
      title: '–ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å',
      description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞',
      input_message_content: {
        message_text: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_distortion' }
          ]]
        }
      }
    }
  ];
  
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã inline –∑–∞–ø—Ä–æ—Å–∞');
  await ctx.answerInlineQuery(results);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –±–∞—Å', callback_data: 'record_bass' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã', callback_data: 'record_treble' }
      ],
      [
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ', callback_data: 'record_echo' },
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é', callback_data: 'record_reverb' }
      ],
      [
        { text: 'üéµ –£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', callback_data: 'record_speed' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å', callback_data: 'record_volume' }
      ],
      [
        { text: 'üéµ –ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å', callback_data: 'record_distortion' }
      ]
    ]
  };
  
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—è:\n\n' +
    '1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @–∏–º—è_–±–æ—Ç–∞\n' +
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–∏–∂–µ:',
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –±–∞—Å', callback_data: 'record_bass' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã', callback_data: 'record_treble' }
      ],
      [
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ', callback_data: 'record_echo' },
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é', callback_data: 'record_reverb' }
      ],
      [
        { text: 'üéµ –£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', callback_data: 'record_speed' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å', callback_data: 'record_volume' }
      ],
      [
        { text: 'üéµ –ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å', callback_data: 'record_distortion' }
      ]
    ]
  };
  
  await ctx.reply(
    '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n' +
    '1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @–∏–º—è_–±–æ—Ç–∞\n' +
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:\n' +
    '   - –£—Å–∏–ª–∏—Ç—å –±–∞—Å\n' +
    '   - –£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã\n' +
    '   - –î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ\n' +
    '   - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é\n' +
    '   - –£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n' +
    '   - –£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å\n' +
    '   - –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–∏–∂–µ:',
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  console.log('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å:', callbackData);
  
  if (callbackData.startsWith('record_')) {
    const filterType = callbackData.replace('record_', '');
    console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–µ—Å—Å–∏—é:', filterType);
    ctx.session = { filterType };
    console.log('–°–µ—Å—Å–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', ctx.session);
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
    await ctx.answerCbQuery('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    let effectName = '';
    switch (filterType) {
      case 'bass': effectName = '—É—Å–∏–ª–µ–Ω–∏—è –±–∞—Å–∞'; break;
      case 'treble': effectName = '—É—Å–∏–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç'; break;
      case 'echo': effectName = '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ö–æ'; break;
      case 'reverb': effectName = '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏'; break;
      case 'speed': effectName = '—É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'; break;
      case 'volume': effectName = '—É—Å–∏–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏'; break;
      case 'distortion': effectName = '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å–∫–∞–∂–µ–Ω–∏—è'; break;
      default: effectName = filterType;
    }
    
    await ctx.reply(`üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${effectName}`);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// –í–∫–ª—é—á–∞–µ–º graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 