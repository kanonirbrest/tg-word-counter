const express = require('express');
const { Telegraf, session } = require('telegraf');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cloudinary = require('cloudinary').v2;
require('dotenv').config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, data = null) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    if (data) {
        console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    const logDir = path.join(__dirname, 'logs');
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir);
    }
    
    const logFile = path.join(logDir, `${new Date().toISOString().split('T')[0]}.log`);
    fs.appendFileSync(logFile, logMessage + '\n');
    if (data) {
        fs.appendFileSync(logFile, '–î–∞–Ω–Ω—ã–µ: ' + JSON.stringify(data, null, 2) + '\n');
    }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
log('=== Environment Variables ===');
log('BOT_TOKEN:', process.env.BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
log('CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME);
log('CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
log('CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary...');
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cloudinary
log('=== Cloudinary Configuration ===');
log('Cloud Name:', process.env.CLOUDINARY_CLOUD_NAME);
log('API Key:', process.env.CLOUDINARY_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
log('API Secret:', process.env.CLOUDINARY_API_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π...');
bot.use(session());

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
    log('–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...');
    fs.mkdirSync(tempDir);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤
const inlineQueryOptions = [
    {
        id: '1',
        title: '–£—Å–∏–ª–∏—Ç—å –±–∞—Å',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –±–∞—Å–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_bass' }
            ]]
        }
    },
    {
        id: '2',
        title: '–£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_treble' }
            ]]
        }
    },
    {
        id: '3',
        title: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —ç—Ö–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_echo' }
            ]]
        }
    },
    {
        id: '4',
        title: '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_reverb' }
            ]]
        }
    },
    {
        id: '5',
        title: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
        description: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_speed' }
            ]]
        }
    },
    {
        id: '6',
        title: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å',
        description: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_volume' }
            ]]
        }
    },
    {
        id: '7',
        title: '–ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å',
        description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_distortion' }
            ]]
        }
    },
    {
        id: '8',
        title: '–ê–≤—Ç–æ—Ç—é–Ω',
        description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∞–≤—Ç–æ—Ç—é–Ω–∞ –∫ –≥–æ–ª–æ—Å—É',
        messageText: 'üé§ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_autotune' }
            ]]
        }
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(fileId, fileName) {
    log('–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞', { fileId, fileName });
    try {
        const file = await bot.telegram.getFile(fileId);
        log('–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ', file);
        
        const filePath = file.file_path;
        const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
        
        log('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ URL', { url });
        const response = await axios({
            method: 'GET',
            url: url,
            responseType: 'stream'
        });
        
        const writer = fs.createWriteStream(fileName);
        response.data.pipe(writer);
        
        return new Promise((resolve, reject) => {
            writer.on('finish', () => {
                log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω', { fileName, size: fs.statSync(fileName).size });
                resolve();
            });
            writer.on('error', (err) => {
                log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞', { error: err.message });
                reject(err);
            });
        });
    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞', { error: error.message, stack: error.stack });
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–∞ —á–µ—Ä–µ–∑ FFmpeg
async function applyAudioFilter(inputFile, filterType) {
    log('–ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–∞', { inputFile, filterType });
    try {
        console.log('\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ ===');
        console.log('–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:', inputFile);
        console.log('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:', filterType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(inputFile)) {
            throw new Error(`–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputFile}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const stats = fs.statSync(inputFile);
        console.log('–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', stats.size, '–±–∞–π—Ç');
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        const processedFile = path.join(tempDir, `processed_${path.basename(inputFile)}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ FFmpeg
        let ffmpegCommand = 'ffmpeg -i ' + inputFile + ' ';
        
        switch(filterType) {
            case 'distortion':
                log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å–∫–∞–∂–µ–Ω–∏—è');
                ffmpegCommand += '-af "acrusher=level_in=8:level_out=18:bits=8:mode=log:aa=1" ';
                break;
            case 'volume':
                ffmpegCommand += '-af "volume=0.1" ';
                break;
            case 'echo':
                ffmpegCommand += '-af "aecho=0.8:0.8:1000:0.5" ';
                break;
            case 'autotune':
                log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ç—é–Ω–∞');
                ffmpegCommand += '-c:a libopus -b:a 48k -af "asetrate=48000*0.7,aresample=48000,volume=1.5" ';
                break;
            case 'robot':
                log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–æ–±–æ—Ç–∞');
                ffmpegCommand += '-af "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75" ';
                break;
            case 'high_pitch':
                log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç–æ–Ω–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞');
                ffmpegCommand += '-af "asetrate=44100*1.5,aresample=44100" ';
                break;
            default:
                ffmpegCommand += '-af "volume=1.0" ';
        }
        
        ffmpegCommand += processedFile;
        
        console.log('–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É FFmpeg:', ffmpegCommand);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
        const { exec } = require('child_process');
        await new Promise((resolve, reject) => {
            exec(ffmpegCommand, (error, stdout, stderr) => {
                if (error) {
                    console.error('–û—à–∏–±–∫–∞ FFmpeg:', error);
                    reject(error);
                    return;
                }
                console.log('FFmpeg stdout:', stdout);
                console.log('FFmpeg stderr:', stderr);
                resolve();
            });
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if (!fs.existsSync(processedFile)) {
            throw new Error('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');
        }
        
        const processedStats = fs.statSync(processedFile);
        console.log('–†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', processedStats.size, '–±–∞–π—Ç');
        
        log('–ê—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', { processedFile });
        return processedFile;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
function getSession(userId) {
    log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏', { userId });
    console.log('=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    try {
        if (fs.existsSync('sessions.json')) {
            const sessions = JSON.parse(fs.readFileSync('sessions.json', 'utf8'));
            const session = sessions[userId] || { filterType: 'volume' };
            console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è:', session);
            log('–ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è', session);
            return session;
        }
        console.log('–§–∞–π–ª —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        log('–§–∞–π–ª —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        return { filterType: 'volume' };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏', { error: error.message, stack: error.stack });
        return { filterType: 'volume' };
    }
}

function saveSession(userId, session) {
    log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏', { 
        userId, 
        session,
        chatId: session.chatId,
        chatType: session.chatType
    });
    
    console.log('=== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', session);
    console.log('chatId:', session.chatId);
    console.log('chatType:', session.chatType);
    
    try {
        let sessions = {};
        if (fs.existsSync('sessions.json')) {
            sessions = JSON.parse(fs.readFileSync('sessions.json', 'utf8'));
        }
        sessions[userId] = session;
        fs.writeFileSync('sessions.json', JSON.stringify(sessions, null, 2));
        console.log('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        log('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', { 
            savedSession: sessions[userId],
            chatId: sessions[userId].chatId
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏', { error: error.message, stack: error.stack });
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
    console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
        userId: ctx.from.id,
        chatId: ctx.chat.id,
        chatType: ctx.chat.type,
        messageType: ctx.message ? Object.keys(ctx.message).filter(key => key !== 'from' && key !== 'chat' && key !== 'date') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        message: ctx.message
    });
    
    if (ctx.message && ctx.message.voice) {
        log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===', {
            userId: ctx.from.id,
            chatId: ctx.chat.id,
            chatType: ctx.chat.type,
            messageId: ctx.message.message_id,
            fileId: ctx.message.voice.file_id,
            duration: ctx.message.voice.duration
        });
        
        try {
            const session = getSession(ctx.from.id);
            log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏', { 
                session,
                chatId: session?.chatId,
                filterType: session?.filterType,
                chatType: session?.chatType
            });
            
            if (!session?.filterType) {
                log('–û–®–ò–ë–ö–ê: –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏');
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ inline —Ä–µ–∂–∏–º.');
                return;
            }
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            log('–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞', {
                fileId: ctx.message.voice.file_id
            });
            
            const file = await ctx.telegram.getFile(ctx.message.voice.file_id);
            const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
            
            log('–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ', {
                fileUrl,
                filePath: file.file_path
            });
            
            const inputPath = await downloadFile(fileUrl);
            log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω', { inputPath });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
            log('–ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞', { 
                filterType: session.filterType,
                inputPath
            });
            
            const outputPath = await applyAudioFilter(inputPath, session.filterType);
            log('–≠—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω', { 
                outputPath,
                filterType: session.filterType
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Cloudinary
            log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary', { outputPath });
            
            const result = await cloudinary.uploader.upload(outputPath, {
                resource_type: 'video',
                folder: 'audio_effects'
            });
            
            log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Cloudinary', { 
                url: result.secure_url
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ', {
                chatId: ctx.chat.id,
                chatType: ctx.chat.type,
                url: result.secure_url
            });
            
            await ctx.replyWithVoice(result.secure_url);
            log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            fs.unlinkSync(inputPath);
            fs.unlinkSync(outputPath);
            log('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
            
            log('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ===');
            
        } catch (error) {
            log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', { 
                error: error.message, 
                stack: error.stack,
                chatId: ctx.chat.id,
                chatType: ctx.chat.type
            });
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('inline_query', async (ctx) => {
    log('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å', {
        userId: ctx.from.id,
        query: ctx.inlineQuery.query,
        chatType: ctx.inlineQuery.chat_type,
        chatInstance: ctx.inlineQuery.chat_instance,
        fullData: ctx.inlineQuery
    });
    
    const session = getSession(ctx.from.id);
    log('–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π', { 
        session,
        chatId: session.chatId
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatId –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    if (ctx.inlineQuery.chat_type === 'private') {
        session.chatId = ctx.from.id;
    } else {
        // –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_instance
        session.chatId = ctx.inlineQuery.chat_instance;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    session.chatType = ctx.inlineQuery.chat_type;
    
    log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω chatId –¥–ª—è —Å–µ—Å—Å–∏–∏', {
        chatId: session.chatId,
        chatType: session.chatType,
        chatInstance: ctx.inlineQuery.chat_instance
    });
    
    saveSession(ctx.from.id, session);
    log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–∞', {
        session,
        chatId: session.chatId,
        chatType: session.chatType
    });
    
    const results = [
        {
            type: 'article',
            id: 'distortion',
            title: '–ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å',
            description: '–°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ –≥—Ä—É–±—ã–º',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_distortion'
                }]]
            }
        },
        {
            type: 'article',
            id: 'autotune',
            title: '–ê–≤—Ç–æ—Ç—é–Ω',
            description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∞–≤—Ç–æ—Ç—é–Ω–∞ –∫ –≥–æ–ª–æ—Å—É',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –ê–≤—Ç–æ—Ç—é–Ω\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_autotune'
                }]]
            }
        },
        {
            type: 'article',
            id: 'robot',
            title: 'ü§ñ –†–æ–±–æ—Ç',
            description: '–°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –†–æ–±–æ—Ç\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_robot'
                }]]
            }
        },
        {
            type: 'article',
            id: 'high_pitch',
            title: 'üéµ –¢–æ–Ω–∫–∏–π –≥–æ–ª–æ—Å',
            description: '–°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–º',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –¢–æ–Ω–∫–∏–π –≥–æ–ª–æ—Å\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_high_pitch'
                }]]
            }
        }
    ];
    
    log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ inline –∑–∞–ø—Ä–æ—Å–∞', { resultsCount: results.length });
    try {
        await ctx.answerInlineQuery(results, {
            cache_time: 0,
            is_personal: true
        });
        log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã inline –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ inline –∑–∞–ø—Ä–æ—Å–∞', { error: error.message, stack: error.stack });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
    log('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å', {
        userId: ctx.from.id,
        data: ctx.callbackQuery.data,
        chatType: ctx.callbackQuery.chat_type,
        message: ctx.callbackQuery.message
    });
    
    try {
        const data = ctx.callbackQuery.data;
        
        if (data.startsWith('record_')) {
            const filterType = data.replace('record_', '');
            log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞', { filterType });
            
            const session = getSession(ctx.from.id);
            session.filterType = filterType;
            
            // –ï—Å–ª–∏ chatId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if (!session.chatId) {
                if (ctx.callbackQuery.message) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º chatId –∏–∑ –Ω–µ–≥–æ
                    session.chatId = ctx.callbackQuery.message.chat.id;
                } else {
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç (inline —Ä–µ–∂–∏–º), –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_instance
                    session.chatId = ctx.callbackQuery.chat_instance;
                }
            }
            
            log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –Ω–æ–≤—ã–º —Ç–∏–ø–æ–º —Ñ–∏–ª—å—Ç—Ä–∞', {
                session,
                chatId: session.chatId,
                currentChatType: ctx.callbackQuery.chat_type
            });
            
            saveSession(ctx.from.id, session);
            
            await ctx.answerCbQuery(`–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: ${filterType}`);
            log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å');
            
            const isInlineQuery = ctx.callbackQuery.inline_message_id !== undefined;
            if (isInlineQuery) {
                log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ inline —Ä–µ–∂–∏–º–µ');
                try {
                    await ctx.editMessageText('üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: ' + filterType + '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                    log('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ inline —Ä–µ–∂–∏–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                } catch (error) {
                    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ inline —Ä–µ–∂–∏–º–µ', { error: error.message, stack: error.stack });
                }
            }
        }
    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞', { error: error.message, stack: error.stack });
        try {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ');
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ', { error: error.message, stack: error.stack });
        }
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
console.log('–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
const startBot = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if (!process.env.BOT_TOKEN) {
            throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_CLOUD_NAME) {
            throw new Error('CLOUDINARY_CLOUD_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_API_KEY) {
            throw new Error('CLOUDINARY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_API_SECRET) {
            throw new Error('CLOUDINARY_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        console.log('–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGTERM', async () => {
            console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
            await bot.stop('SIGTERM');
            process.exit(0);
        });

        process.on('SIGINT', async () => {
            console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
            await bot.stop('SIGINT');
            process.exit(0);
        });

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let retryCount = 0;
        const maxRetries = 3;
        
        while (retryCount < maxRetries) {
            try {
                // –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å
                await bot.launch({
                    allowed_updates: ['message', 'callback_query', 'inline_query']
                });
                console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
                console.log('–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: message, callback_query, inline_query');
                break;
            } catch (error) {
                retryCount++;
                if (error.description && error.description.includes('Conflict: terminated by other getUpdates request')) {
                    console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount} –∏–∑ ${maxRetries}`);
                    if (retryCount < maxRetries) {
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await new Promise(resolve => setTimeout(resolve, 5000 * retryCount));
                    } else {
                        console.log('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.');
                        process.exit(1);
                    }
                } else {
                    throw error;
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot(); 