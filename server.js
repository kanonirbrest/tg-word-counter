const express = require('express');
const { Telegraf, session } = require('telegraf');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cloudinary = require('cloudinary').v2;
require('dotenv').config();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== Environment Variables ===');
console.log('BOT_TOKEN:', process.env.BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME);
console.log('CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('=============================');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cloudinary
console.log('=== Cloudinary Configuration ===');
console.log('Cloud Name:', process.env.CLOUDINARY_CLOUD_NAME);
console.log('API Key:', process.env.CLOUDINARY_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('API Secret:', process.env.CLOUDINARY_API_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('=============================');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session());

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤
const inlineQueryOptions = [
    {
        id: '1',
        title: '–£—Å–∏–ª–∏—Ç—å –±–∞—Å',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –±–∞—Å–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_bass' }
            ]]
        }
    },
    {
        id: '2',
        title: '–£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_treble' }
            ]]
        }
    },
    {
        id: '3',
        title: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —ç—Ö–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_echo' }
            ]]
        }
    },
    {
        id: '4',
        title: '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_reverb' }
            ]]
        }
    },
    {
        id: '5',
        title: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
        description: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_speed' }
            ]]
        }
    },
    {
        id: '6',
        title: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å',
        description: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_volume' }
            ]]
        }
    },
    {
        id: '7',
        title: '–ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å',
        description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_distortion' }
            ]]
        }
    },
    {
        id: '8',
        title: '–ê–≤—Ç–æ—Ç—é–Ω',
        description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∞–≤—Ç–æ—Ç—é–Ω–∞ –∫ –≥–æ–ª–æ—Å—É',
        messageText: 'üé§ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_autotune' }
            ]]
        }
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(fileId, fileName) {
  try {
    const file = await bot.telegram.getFile(fileId);
    const filePath = file.file_path;
    const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
    
    const response = await axios({
      method: 'GET',
      url: url,
      responseType: 'stream'
    });
    
    const writer = fs.createWriteStream(fileName);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–∞ —á–µ—Ä–µ–∑ FFmpeg
async function applyAudioFilter(inputFile, filterType) {
    try {
        console.log('\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ ===');
        console.log('–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:', inputFile);
        console.log('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:', filterType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(inputFile)) {
            throw new Error(`–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputFile}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const stats = fs.statSync(inputFile);
        console.log('–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', stats.size, '–±–∞–π—Ç');
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        const processedFile = path.join(tempDir, `processed_${path.basename(inputFile)}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ FFmpeg
        let ffmpegCommand = 'ffmpeg -i ' + inputFile + ' ';
        
        switch(filterType) {
            case 'distortion':
                ffmpegCommand += '-af "acrusher=level_in=8:level_out=18:bits=8:mode=log:aa=1" ';
                break;
            case 'volume':
                ffmpegCommand += '-af "volume=0.1" ';
                break;
            case 'echo':
                ffmpegCommand += '-af "aecho=0.8:0.8:1000:0.5" ';
                break;
            case 'autotune':
                ffmpegCommand += '-af "asetrate=44100*0.7,aresample=44100" ';
                break;
            case 'robot':
                ffmpegCommand += '-af "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75" ';
                break;
            case 'high_pitch':
                // –≠—Ñ—Ñ–µ–∫—Ç —Ç–æ–Ω–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ - –¥–µ–ª–∞–µ–º –≥–æ–ª–æ—Å –≤—ã—à–µ –∏ —Ç–æ–Ω—å—à–µ
                ffmpegCommand += '-af "asetrate=44100*1.5,aresample=44100" ';
                break;
            default:
                ffmpegCommand += '-af "volume=1.0" ';
        }
        
        ffmpegCommand += processedFile;
        
        console.log('–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É FFmpeg:', ffmpegCommand);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
        const { exec } = require('child_process');
        await new Promise((resolve, reject) => {
            exec(ffmpegCommand, (error, stdout, stderr) => {
                if (error) {
                    console.error('–û—à–∏–±–∫–∞ FFmpeg:', error);
                    reject(error);
                    return;
                }
                console.log('FFmpeg stdout:', stdout);
                console.log('FFmpeg stderr:', stderr);
                resolve();
            });
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if (!fs.existsSync(processedFile)) {
            throw new Error('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');
        }
        
        const processedStats = fs.statSync(processedFile);
        console.log('–†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', processedStats.size, '–±–∞–π—Ç');
        
        return processedFile;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
function getSession(userId) {
    console.log('=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    try {
        if (fs.existsSync('sessions.json')) {
            const sessions = JSON.parse(fs.readFileSync('sessions.json', 'utf8'));
            console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è:', sessions[userId] || { filterType: 'volume' });
            return sessions[userId] || { filterType: 'volume' };
        }
        console.log('–§–∞–π–ª —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        return { filterType: 'volume' };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        return { filterType: 'volume' };
    }
}

function saveSession(userId, session) {
    console.log('=== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', session);
    
    try {
        let sessions = {};
        if (fs.existsSync('sessions.json')) {
            sessions = JSON.parse(fs.readFileSync('sessions.json', 'utf8'));
        }
        sessions[userId] = session;
        fs.writeFileSync('sessions.json', JSON.stringify(sessions, null, 2));
        console.log('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
    console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    console.log('\n');
    console.log('****************************************');
    console.log('************ –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ***********');
    console.log('****************************************');
    console.log('–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:', new Date().toISOString());
    console.log('–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message ? Object.keys(ctx.message).filter(key => key !== 'from' && key !== 'chat' && key !== 'date') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    console.log('–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    console.log('–í —á–∞—Ç–µ:', ctx.chat.id);
    console.log('–¢–∏–ø —á–∞—Ç–∞:', ctx.chat.type);
    console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:', ctx.chat.type === 'private' ? '–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç');
    
    // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(ctx.message, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.message && ctx.message.voice) {
        console.log('\n!!! –û–ë–ù–ê–†–£–ñ–ï–ù–û –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï !!!');
        console.log('----------------------------------------');
        console.log('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message.voice.duration, '—Å–µ–∫—É–Ω–¥');
        console.log('File ID:', ctx.message.voice.file_id);
        console.log('MIME —Ç–∏–ø:', ctx.message.voice.mime_type);
        console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(ctx.message.voice, null, 2));
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
            console.log('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ ===');
            const session = getSession(ctx.from.id);
            console.log('–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', session);
            
            if (!session || !session.filterType) {
                console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ @–∏–º—è_–±–æ—Ç–∞');
                return;
            }
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log('\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
            console.log('–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ...');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const file = await ctx.telegram.getFile(ctx.message.voice.file_id);
            console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', JSON.stringify(file, null, 2));
            
            const filePath = file.file_path;
            const fileName = path.join(tempDir, `${ctx.message.voice.file_id}.ogg`);
            
            console.log('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', filePath);
            console.log('–°–æ—Ö—Ä–∞–Ω—è—é –≤:', fileName);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            console.log('–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...');
            const response = await axios({
                method: 'GET',
                url: `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`,
                responseType: 'stream'
            });
            
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä:', response.headers['content-length'], '–±–∞–π—Ç');
            
            const writer = fs.createWriteStream(fileName);
            response.data.pipe(writer);
            
            await new Promise((resolve, reject) => {
                writer.on('finish', () => {
                    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–∏—Å–∫');
                    const stats = fs.statSync(fileName);
                    console.log('–†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', stats.size, '–±–∞–π—Ç');
                    resolve();
                });
                writer.on('error', (err) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
                    reject(err);
                });
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            console.log('\n=== –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ ===');
            console.log('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:', session.filterType);
            console.log('–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...');
            const processedFile = await applyAudioFilter(fileName, session.filterType);
            console.log('‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', processedFile);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log('\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            const targetChatId = session.chatId || ctx.from.id;
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç:', targetChatId);
            console.log('–¢–∏–ø —á–∞—Ç–∞:', ctx.chat.type);
            
            await ctx.telegram.sendVoice(targetChatId, { source: processedFile });
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:', targetChatId);
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            console.log('\n=== –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===');
            console.log('–£–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');
            fs.unlinkSync(fileName);
            fs.unlinkSync(processedFile);
            console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('\n‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø ‚ùå‚ùå‚ùå');
            console.error('–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
            console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            try {
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
            }
        }
    } else {
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
        console.log('–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏—è:', Object.keys(ctx.message || {}));
    }
    
    console.log('\n****************************************');
    console.log('********** –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò *************');
    console.log('****************************************\n');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('inline_query', async (ctx) => {
    console.log('\n=== INLINE QUERY START ===');
    console.log('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(ctx.inlineQuery, null, 2));
    
    const results = [
        {
            type: 'article',
            id: 'distortion',
            title: '–ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å',
            description: '–°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ –≥—Ä—É–±—ã–º',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_distortion'
                }]]
            }
        },
        {
            type: 'article',
            id: 'autotune',
            title: '–ê–≤—Ç–æ—Ç—é–Ω',
            description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∞–≤—Ç–æ—Ç—é–Ω–∞ –∫ –≥–æ–ª–æ—Å—É',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –ê–≤—Ç–æ—Ç—é–Ω\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_autotune'
                }]]
            }
        },
        {
            type: 'article',
            id: 'robot',
            title: 'ü§ñ –†–æ–±–æ—Ç',
            description: '–°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –†–æ–±–æ—Ç\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_robot'
                }]]
            }
        },
        {
            type: 'article',
            id: 'high_pitch',
            title: 'üéµ –¢–æ–Ω–∫–∏–π –≥–æ–ª–æ—Å',
            description: '–°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–º',
            input_message_content: {
                message_text: 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: –¢–æ–Ω–∫–∏–π –≥–æ–ª–æ—Å\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            },
            reply_markup: {
                inline_keyboard: [[{ 
                    text: 'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', 
                    callback_data: 'record_high_pitch'
                }]]
            }
        }
    ];
    
    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã inline –∑–∞–ø—Ä–æ—Å–∞...');
    try {
        await ctx.answerInlineQuery(results, {
            cache_time: 0,
            is_personal: true
        });
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
    console.log('=== INLINE QUERY END ===\n');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
    console.log('\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞ ===');
    console.log('Callback –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(ctx.callbackQuery, null, 2));
    console.log('–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', ctx.from.id);
    console.log('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.username);
    
    try {
        const data = ctx.callbackQuery.data;
        console.log('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å:', data);
        
        if (data.startsWith('record_')) {
            const filterType = data.replace('record_', '');
            console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–µ—Å—Å–∏—é:', filterType);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            const session = getSession(ctx.from.id);
            console.log('–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', session);
            session.filterType = filterType;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π chatId
            if (ctx.callbackQuery.chat_type === 'private') {
                // –í –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session.chatId = ctx.from.id;
                console.log('–≠—Ç–æ –ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è—é chatId:', session.chatId);
            } else if (ctx.chat) {
                // –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞
                session.chatId = ctx.chat.id;
                console.log('–≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è—é chatId:', session.chatId);
            } else {
                // –í inline —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session.chatId = ctx.from.id;
                console.log('–≠—Ç–æ inline —Ä–µ–∂–∏–º, —Å–æ—Ö—Ä–∞–Ω—è—é chatId:', session.chatId);
            }
            
            saveSession(ctx.from.id, session);
            console.log('–°–µ—Å—Å–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', session);
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å...');
            await ctx.answerCbQuery(`–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: ${filterType}`);
            console.log('‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ inline –∑–∞–ø—Ä–æ—Å–æ–º
            const isInlineQuery = ctx.callbackQuery.inline_message_id !== undefined;
            console.log('–≠—Ç–æ inline –∑–∞–ø—Ä–æ—Å:', isInlineQuery);
            
            if (isInlineQuery) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ inline —Ä–µ–∂–∏–º–µ
                console.log('–û–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ inline —Ä–µ–∂–∏–º–µ...');
                try {
                    await ctx.editMessageText('üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: ' + filterType + '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
                    if (ctx.callbackQuery.chat_type !== 'private') {
                        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
                        try {
                            await ctx.telegram.sendMessage(ctx.from.id, 'üé§ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: ' + filterType + '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                            console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
                        }
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        try {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:', error);
        }
    }
    console.log('=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò CALLBACK –ó–ê–ü–†–û–°–ê ===\n');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
console.log('–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
const startBot = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if (!process.env.BOT_TOKEN) {
            throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_CLOUD_NAME) {
            throw new Error('CLOUDINARY_CLOUD_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_API_KEY) {
            throw new Error('CLOUDINARY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_API_SECRET) {
            throw new Error('CLOUDINARY_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        console.log('–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGTERM', async () => {
            console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
            await bot.stop('SIGTERM');
            process.exit(0);
        });

        process.on('SIGINT', async () => {
            console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
            await bot.stop('SIGINT');
            process.exit(0);
        });

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let retryCount = 0;
        const maxRetries = 3;
        
        while (retryCount < maxRetries) {
            try {
                // –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å
                await bot.launch({
                    allowed_updates: ['message', 'callback_query', 'inline_query']
                });
                console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
                console.log('–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: message, callback_query, inline_query');
                break;
            } catch (error) {
                retryCount++;
                if (error.description && error.description.includes('Conflict: terminated by other getUpdates request')) {
                    console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount} –∏–∑ ${maxRetries}`);
                    if (retryCount < maxRetries) {
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await new Promise(resolve => setTimeout(resolve, 5000 * retryCount));
                    } else {
                        console.log('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.');
                        process.exit(1);
                    }
                } else {
                    throw error;
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot(); 