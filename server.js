const express = require('express');
const { Telegraf, session } = require('telegraf');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cloudinary = require('cloudinary').v2;
require('dotenv').config();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== Environment Variables ===');
console.log('BOT_TOKEN:', process.env.BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME);
console.log('CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('=============================');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cloudinary
console.log('=== Cloudinary Configuration ===');
console.log('Cloud Name:', process.env.CLOUDINARY_CLOUD_NAME);
console.log('API Key:', process.env.CLOUDINARY_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('API Secret:', process.env.CLOUDINARY_API_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('=============================');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session());

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤
const inlineQueryOptions = [
    {
        id: '1',
        title: '–£—Å–∏–ª–∏—Ç—å –±–∞—Å',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –±–∞—Å–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_bass' }
            ]]
        }
    },
    {
        id: '2',
        title: '–£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–∏–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_treble' }
            ]]
        }
    },
    {
        id: '3',
        title: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —ç—Ö–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_echo' }
            ]]
        }
    },
    {
        id: '4',
        title: '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é',
        description: '–ù–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_reverb' }
            ]]
        }
    },
    {
        id: '5',
        title: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
        description: '–£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_speed' }
            ]]
        }
    },
    {
        id: '6',
        title: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å',
        description: '–£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_volume' }
            ]]
        }
    },
    {
        id: '7',
        title: '–ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å',
        description: '–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞',
        messageText: 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        replyMarkup: {
            inline_keyboard: [[
                { text: 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'record_distortion' }
            ]]
        }
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(fileId, fileName) {
  try {
    const file = await bot.telegram.getFile(fileId);
    const filePath = file.file_path;
    const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
    
    const response = await axios({
      method: 'GET',
      url: url,
      responseType: 'stream'
    });
    
    const writer = fs.createWriteStream(fileName);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–∞ —á–µ—Ä–µ–∑ Cloudinary
async function applyAudioFilter(inputFile, filterType) {
    try {
        console.log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ ===');
        console.log('–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:', inputFile);
        console.log('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:', filterType);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloudinary
        console.log('–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ Cloudinary...');
        const uploadResult = await cloudinary.uploader.upload(inputFile, {
            resource_type: 'video',
            format: 'ogg'
        });
        console.log('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary:', uploadResult.public_id);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        console.log('–ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –≤ Cloudinary...');
        const result = await cloudinary.video(uploadResult.public_id, {
            resource_type: 'video',
            format: 'ogg',
            audio_codec: 'libvorbis',
            audio_effects: filterType
        });
        console.log('–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω, URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        console.log('–°–∫–∞—á–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª...');
        const response = await axios({
            method: 'GET',
            url: result,
            responseType: 'stream'
        });
        
        const outputFile = path.join(tempDir, `processed_${path.basename(inputFile)}`);
        console.log('–°–æ—Ö—Ä–∞–Ω—è—é –≤ —Ñ–∞–π–ª:', outputFile);
        
        const writer = fs.createWriteStream(outputFile);
        response.data.pipe(writer);
        
        return new Promise((resolve, reject) => {
            writer.on('finish', () => {
                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', outputFile);
                resolve(outputFile);
            });
            writer.on('error', (err) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
                reject(err);
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
function getSession(userId) {
    try {
        if (fs.existsSync('sessions.json')) {
            const sessions = JSON.parse(fs.readFileSync('sessions.json', 'utf8'));
            return sessions[userId] || { filterType: 'volume' };
        }
        return { filterType: 'volume' };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
        return { filterType: 'volume' };
    }
}

function saveSession(userId, session) {
    try {
        let sessions = {};
        if (fs.existsSync('sessions.json')) {
            sessions = JSON.parse(fs.readFileSync('sessions.json', 'utf8'));
        }
        sessions[userId] = session;
        fs.writeFileSync('sessions.json', JSON.stringify(sessions, null, 2));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    console.log('=== –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===');
    console.log('–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message ? Object.keys(ctx.message).filter(key => key !== 'from' && key !== 'chat' && key !== 'date') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    console.log('–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    console.log('–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(ctx.message, null, 2));
    console.log('========================');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (ctx) => {
    try {
        console.log('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
        console.log('–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
        console.log('–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(ctx.message, null, 2));
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        const session = await getSession(ctx.from.id);
        console.log('–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', session);
        
        if (!session || !session.filterType) {
            console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç');
            return;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('–°–∫–∞—á–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        const file = await ctx.telegram.getFile(ctx.message.voice.file_id);
        const filePath = file.file_path;
        const fileName = path.join(tempDir, `${ctx.message.voice.file_id}.ogg`);
        
        console.log('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', filePath);
        console.log('–°–æ—Ö—Ä–∞–Ω—è—é –≤:', fileName);
        
        const response = await axios({
            method: 'GET',
            url: `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`,
            responseType: 'stream'
        });
        
        const writer = fs.createWriteStream(fileName);
        response.data.pipe(writer);
        
        await new Promise((resolve, reject) => {
            writer.on('finish', resolve);
            writer.on('error', reject);
        });
        
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        console.log('–ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä:', session.filterType);
        const processedFile = await applyAudioFilter(fileName, session.filterType);
        console.log('–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', processedFile);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        await ctx.replyWithVoice({ source: processedFile });
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        console.log('–£–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');
        fs.unlinkSync(fileName);
        fs.unlinkSync(processedFile);
        console.log('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('inline_query', async (ctx) => {
  console.log('=== INLINE QUERY START ===');
  console.log('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å:', ctx.inlineQuery.query);
  console.log('–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
  
  try {
    const results = inlineQueryOptions.map(option => ({
      type: 'article',
      id: option.id,
      title: option.title,
      description: option.description,
      input_message_content: {
        message_text: option.messageText
      },
      reply_markup: option.replyMarkup
    }));

    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã inline –∑–∞–ø—Ä–æ—Å–∞');
    await ctx.answerInlineQuery(results);
    console.log('=== INLINE QUERY END ===');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline –∑–∞–ø—Ä–æ—Å–∞:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –±–∞—Å', callback_data: 'record_bass' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã', callback_data: 'record_treble' }
      ],
      [
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ', callback_data: 'record_echo' },
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é', callback_data: 'record_reverb' }
      ],
      [
        { text: 'üéµ –£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', callback_data: 'record_speed' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å', callback_data: 'record_volume' }
      ],
      [
        { text: 'üéµ –ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å', callback_data: 'record_distortion' }
      ]
    ]
  };
  
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—è:\n\n' +
    '1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @–∏–º—è_–±–æ—Ç–∞\n' +
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–∏–∂–µ:',
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –±–∞—Å', callback_data: 'record_bass' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã', callback_data: 'record_treble' }
      ],
      [
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ', callback_data: 'record_echo' },
        { text: 'üéµ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é', callback_data: 'record_reverb' }
      ],
      [
        { text: 'üéµ –£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', callback_data: 'record_speed' },
        { text: 'üéµ –£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å', callback_data: 'record_volume' }
      ],
      [
        { text: 'üéµ –ì—Ä—É–±—ã–π –≥–æ–ª–æ—Å', callback_data: 'record_distortion' }
      ]
    ]
  };
  
  await ctx.reply(
    '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n' +
    '1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @–∏–º—è_–±–æ—Ç–∞\n' +
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:\n' +
    '   - –£—Å–∏–ª–∏—Ç—å –±–∞—Å\n' +
    '   - –£—Å–∏–ª–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã\n' +
    '   - –î–æ–±–∞–≤–∏—Ç—å —ç—Ö–æ\n' +
    '   - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é\n' +
    '   - –£—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n' +
    '   - –£—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å\n' +
    '   - –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–∏–∂–µ:',
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
    console.log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞ ===');
    console.log('Callback –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(ctx.callbackQuery, null, 2));
    
    try {
        const data = ctx.callbackQuery.data;
        console.log('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å:', data);
        
        if (data.startsWith('record_')) {
            const filterType = data.replace('record_', '');
            console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–µ—Å—Å–∏—é:', filterType);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            const session = getSession(ctx.from.id);
            session.filterType = filterType;
            saveSession(ctx.from.id, session);
            console.log('–°–µ—Å—Å–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', session);
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
            await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: ${filterType}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ inline –∑–∞–ø—Ä–æ—Å–æ–º
            if (!ctx.callbackQuery.inline_message_id) {
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ inline –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.telegram.sendMessage(ctx.from.id, 'üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if (!process.env.BOT_TOKEN) {
            throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_CLOUD_NAME) {
            throw new Error('CLOUDINARY_CLOUD_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_API_KEY) {
            throw new Error('CLOUDINARY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        if (!process.env.CLOUDINARY_API_SECRET) {
            throw new Error('CLOUDINARY_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        console.log('–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
        try {
            await bot.launch();
            console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
            if (error.description && error.description.includes('Conflict: terminated by other getUpdates request')) {
                console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü—Ä–æ–±—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...');
                // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, 5000));
                await bot.launch();
                console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
            } else {
                throw error;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
};

// –í–∫–ª—é—á–∞–µ–º graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot(); 